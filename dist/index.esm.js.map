{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["import HookEvent from '@hook/event'\nimport { merge, isPlainObject } from 'lodash'\n\nexport { options } from '@hook/event'\nexport type setterKey = string | {[key: string]: any }\n\ntype setterReadonlys = {\n  [key: string]: boolean\n}\ntype readonlySetters = {\n  [setterName: string]: setterReadonlys\n}\n\ntype setterData = {\n  [key: string]: any\n}\ntype settersData = {\n  [key: string] : setterData\n}\n\ntype config = {\n  [setterName: string]: any\n}\n\nexport default class Hook extends HookEvent {\n  private _readonlySetters: readonlySetters = {}\n  private _setterdata: settersData= {}\n\n  private _getSetterData(setterName: string): any {\n    const caches = this._setterdata\n    if (!caches[setterName]) {\n      caches[setterName] = {}\n    }\n    return caches[setterName]\n  }\n\n  set(key: setterKey, value?: any): this {\n    return this.generateSetter('set')(key, value)\n  }\n\n  get(field?: string): any {\n    return this.generateGetter('set')(field)\n  }\n\n  generateSetter(setterName: string, setterReadonlys?: setterReadonlys): (key: setterKey, value?: any) => this {\n    const datas: config = this._getSetterData(setterName)\n    if (setterReadonlys) {\n      this.setReadOnlyProps(setterName, setterReadonlys)\n    }\n\n    return (key: setterKey, value?: any): this => {\n      const readOnlys = this.getReadonlyProps(setterName)\n\n      if (isPlainObject(key)) {\n        const config = <config>key\n        Object.keys(readOnlys).forEach((prop) => {\n          if (typeof config[prop] !== 'undefined') {\n            delete config[prop]\n            this.emit('HOOK_ERROR', {\n              code: 300002,\n              message: 'can not set readonly props',\n              detail: {\n                method: setterName,\n                prop: prop,\n                value: config[prop]\n              }\n            })\n          }\n        })\n        merge(datas, config)\n      } else if (typeof key === 'string' && typeof value !== 'undefined') {\n        if (!readOnlys[key]) {\n          datas[key] = value\n        } else {\n          this.emit('HOOK_ERROR', {\n            code: 300001,\n            message: 'can not set readonly prop',\n            detail: {\n              method: setterName,\n              prop: key,\n              value: value\n            }\n          })\n        }\n      }\n      return this\n    }\n  }\n\n  generateGetter(setterName: string): (field?: string) => any {\n    const datas: config = this._getSetterData(setterName)\n    return (field?: string): any => {\n      if (field) {\n        return datas[field]\n      }\n      return datas\n    }\n  }\n\n  getReadonlyProps(setterName: string): setterReadonlys {\n    const caches = this._readonlySetters\n    if (!caches[setterName]) {\n      caches[setterName] = {}\n    }\n    return caches[setterName]\n  }\n\n  setReadOnlyProps(setterName: string, props: setterReadonlys = {}): this {\n    const cache = this.getReadonlyProps(setterName)\n    Object.keys(props).forEach((key) => {\n      if (props[key]) {\n        cache[key] = true\n      } else {\n        delete cache[key]\n      }\n    })\n    return this\n  }\n}\n"],"names":["Hook","setterName","caches","_setterdata","key","value","generateSetter","field","generateGetter","setterReadonlys","datas","_getSetterData","setReadOnlyProps","readOnlys","getReadonlyProps","config","Object","keys","forEach","prop","emit","code","message","detail","method","_readonlySetters","props","cache","HookEvent"],"mappings":"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"}